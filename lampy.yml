AWSTemplateFormatVersion: 2010-09-09
Description: >-
  REST API on a LAMPy stack

Resources:
  VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: lampy-vpc

  IGW:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: lampy-igw
  GatewayToInternet:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref IGW

  WSSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: 'ap-southeast-2a'
      Tags:
        - Key: Name
          Value: ws-public-az-a

  DBSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: 'ap-southeast-2a'
      Tags:
        - Key: Name
          Value: db-private-az-a

  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-rt
  RouteToInternet:
    Type: 'AWS::EC2::Route'
    DependsOn: GatewayToInternet
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref IGW
      RouteTableId: !Ref PublicRouteTable
  PublicSubnetRTAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref WSSubnet

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-rt
  PrivateSubnetRTAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref DBSubnet

  PublicWSNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: public-ws-nacl
  PublicInboundRule1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicWSNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 80
        To: 80
  PublicInboundRule2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicWSNACL
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.0.0/16 # VPC CIDR
      PortRange:
        From: 32768
        To: 65535
  PublicOutboundRule1:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicWSNACL
      Egress: true
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.0.0/16 # VPC CIDR
      PortRange:
        From: 3306
        To: 3306
  PublicOutboundRule2:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PublicWSNACL
      Egress: true
      RuleNumber: 110
      Protocol: 6
      RuleAction: allow
      CidrBlock: 0.0.0.0/0
      PortRange:
        From: 32768
        To: 65535
  PublicSubnetNACLAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref PublicWSNACL
      SubnetId: !Ref WSSubnet

  PrivateDBNACL:
    Type: 'AWS::EC2::NetworkAcl'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: private-db-nacl
  PrivateInboundRule:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.0.0/16 # VPC CIDR
      PortRange:
        From: 3306
        To: 3306
  PrivateOutboundRule:
    Type: 'AWS::EC2::NetworkAclEntry'
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      Egress: true
      RuleNumber: 100
      Protocol: 6
      RuleAction: allow
      CidrBlock: 10.0.0.0/16 # VPC CIDR
      PortRange:
        From: 32768
        To: 65535
  PrivateSubnetNACLAssociation:
    Type: 'AWS::EC2::SubnetNetworkAclAssociation'
    Properties:
      NetworkAclId: !Ref PrivateDBNACL
      SubnetId: !Ref DBSubnet

  wssg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow HTTP traffic
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 10.0.0.0/16 # VPC CIDR
      Tags:
        - Key: Name
          Value: ws-sg

  dbsg:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow web servers to access the DB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          SourceSecurityGroupId: !Ref wssg
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: '3306'
          ToPort: '3306'
          CidrIp: 10.0.0.0/16 # VPC CIDR
      Tags:
        - Key: Name
          Value: db-sg

  # WebServerInstance:
  #   Type: 'AWS::EC2::Instance'
  #   Metadata:
  #     'AWS::CloudFormation::Init':
  #       configSets:
  #         InstallAndRun:
  #           - Install
  #           - Configure
  #         Install:
  #           packages:
  #             yum:
  #               mysql: []
  #               mysql-server: []
  #               mysql-libs: []
  #               httpd: []
